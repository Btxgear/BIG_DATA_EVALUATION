package spark.batch;

import java.io.Serializable;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.SparkSession;
import org.apache.spark.sql.functions;

import com.google.common.base.Preconditions;

public class AddedDateRepartition implements Serializable {

        private static final long serialVersionUID = 1L;

        public static void main(String[] args) {
                Preconditions.checkArgument(args.length > 1,
                                "Please provide the path of input file and output dir as parameters.");
                new AddedDateRepartition().run(args[0], args[1]);
        }

        public void run(String inputDirectoryPath, String outputFilePath) {
                // Configuration pour le mode cluster YARN
                SparkConf conf = new SparkConf()
                                .setAppName(AddedDateRepartition.class.getName())
                                .set("spark.yarn.queue", "default");

                JavaSparkContext sc = new JavaSparkContext(conf);
                SparkSession spark = SparkSession.builder().config(conf).getOrCreate();

                // Charger tous les fichiers CSV dans le répertoire d'entrée dans un DataFrame
                Dataset<Row> df = spark.read()
                                .option("header", "true")
                                .option("inferSchema", "true")
                                .option("sep", ";")
                                .csv(inputDirectoryPath);

                // Assurer que la colonne "date_added" est de type DateType
                Dataset<Row> dfWithDate = df.withColumn("date_added", functions.to_date(df.col("date_added")));

                // Nombre de contenus ajoutés chaque mois
                Dataset<Row> result = dfWithDate
                                .filter("date_added is not null") // Filtrer les lignes avec des dates nulles
                                .withColumn("month", functions.format_number(functions.month(df.col("date_added"))))
                                .withColumn("year", functions.year(df.col("date_added")))
                                .withColumn("year_month",
                                                functions.concat_ws("-", dfWithDate.col("year"),
                                                                dfWithDate.col("month")))
                                .groupBy("year_month")
                                .count()
                                .orderBy(functions.asc("year_month"));

                // Renommer la colonne de comptage
                result = result.withColumnRenamed("count", "count");

                // Sauvegarder les résultats dans un fichier de sortie
                result.write().option("header", "true").csv(outputFilePath);

                // Fermer la session Spark et le contexte Spark
                spark.stop();
                sc.close();
        }
}
